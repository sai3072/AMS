<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_ui_macro">
    <sys_ui_macro action="INSERT_OR_UPDATE">
        <active>false</active>
        <category>general</category>
        <description>To get Sections depending upon the ChangeTypeId</description>
        <media_type/>
        <name>AMS_Get_SectionV2</name>
        <scoped_name>x_109369_ams_AMS_Get_SectionV2</scoped_name>
        <sys_class_name>sys_ui_macro</sys_class_name>
        <sys_created_by>madhav</sys_created_by>
        <sys_created_on>2017-05-24 13:30:15</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>03b1bf2fdb3a7200ef73d8c0cf9619b0</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>AMS_Get_SectionV2</sys_name>
        <sys_package display_value="AMS" source="x_109369_ams">5b693bf9db427200ef73d8c0cf961927</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AMS">5b693bf9db427200ef73d8c0cf961927</sys_scope>
        <sys_update_name>sys_ui_macro_03b1bf2fdb3a7200ef73d8c0cf9619b0</sys_update_name>
        <sys_updated_by>madhav</sys_updated_by>
        <sys_updated_on>2017-05-24 13:30:22</sys_updated_on>
        <xml><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">
	<style>
*{font-family: 'Roboto', sans-serif;}

@keyframes click-wave {
  0% {
    height: 40px;
    width: 40px;
    opacity: 0.35;
    position: relative;
  }
  100% {
    height: 100px;
    width: 100px;
    margin-left: -40px;
    margin-top: -40px;
    opacity: 0;
  }
}

.justify-center{
		display:flex;
		justify-content:center;
		align-items:center;
}
		
.option-input {
  -webkit-appearance: none;
  -moz-appearance: none;
  -ms-appearance: none;
  -o-appearance: none;
  appearance: none;
  position: relative;
  top: 0;
  right: 0;
  bottom: 0;
  left: 5px;
  height: 40px;
  width: 40px;
  transition: all 0.15s ease-out 0s;
  background: #cbd1d8;
  border: none;
  color: #fff;
  cursor: pointer;
  display: inline-block;
  margin-right: 0.5rem;
  outline: none;
  position: relative;
  z-index: 1000;
}
.option-input:hover {
  background: #9faab7;
}
.option-input:checked {
  background: #40e0d0;
}
.option-input:checked::before {
  height: 40px;
  width: 40px;
  position: absolute;
  content: 'âœ”';
  display: inline-block;
  font-size: 26.66667px;
  text-align: center;
  line-height: 40px;
}
.option-input:checked::after {
  -webkit-animation: click-wave 0.65s;
  -moz-animation: click-wave 0.65s;
  animation: click-wave 0.65s;
  background: #40e0d0;
  content: '';
  display: block;
  position: relative;
  z-index: 100;
}
.option-input.radio {
  border-radius: 50%;
}
.option-input.radio::after {
  border-radius: 50%;
}
</style>
	 <script>
var advanceParamTable = document.createElement("table");
advanceParamTable.style.width = "100%";
advanceParamTable.id = "advanceFieldsTable";
var tableDiv = document.createElement("DIV");
tableDiv.id = "fieldsTable";
var paramTable = document.createElement("table");
paramTable.id = "mainTable";
var stackTempIdTable = document.createElement("table");
stackTempIdTable.style.width = "65%";
stackTempIdTable.id = "stackTempIdTable";	

function showBodyDiv(){
		 $("bodyDiv").hide();
	 }
function setChangeTypeId(id) {
	$("bodyDiv").show();
    var mainTableX = document.getElementById("mainTable");
	if (mainTableX) {
		var totalRows = mainTableX.rows.length;
		console.log('mainTable totalRows = ' + totalRows);
		 var i =0;
		while (totalRows > i) {
			mainTableX.deleteRow(i++);
		}
	}
	var ga = new GlideAjax('Get_RFC_Form_Fields');
	ga.addParam('sysparm_name', 'getFields');
	ga.addParam('sysparm_changeTypeId', id);
	ga.getXMLWait();
	var res = ga.getAnswer();
	var params = JSON.parse(res);
	tableDiv.cellSpacing = "10px";
	paramTable.style.width = "100%";
	Object.keys(params).forEach(function(key) {
		var paramTR = document.createElement("tr");
		var tdLable = document.createElement('td');
		tdLable.style.width = "30%";
		var labelBox = document.createElement("LABEL");
		var textnode = document.createTextNode(key);
		labelBox.appendChild(textnode);
		labelBox.style.fontWeight = "bold";
		tdLable.appendChild(labelBox);
		var tdTextBox = document.createElement("td");
		 tdTextBox.setAttribute("class", "justify-center");
		var inputBox = document.createElement("INPUT");
		inputBox.id = key;
		inputBox.style.width = "100%";
		inputBox.className = "form-control";
		
		var radioDIV = radioDIV = document.createElement("DIV");
		radioDIV.style.width = "80%";
		radioDIV.align = "left";
		var ifBooleanContains = false;
		var isMandatory = false;
		var isReferenceField=false;
		var tdReferenceText = document.createElement('td');
		var tdReferenceClearBtn = document.createElement('td');
		Object.keys(params[key]).forEach(function(insideKey) {
			if (insideKey == 'paramType') {
				if (params[key][insideKey] == 'boolean') {
					ifBooleanContains = true;
					var radioInputBox = document.createElement("INPUT");
					radioInputBox.type = 'radio';
					radioInputBox.name = key;
					radioInputBox.className = "requiredInput"; 
					radioInputBox.id = key;
					radioInputBox.value = "true";
					var radioLabel = document.createElement("LABEL");
					radioLabel.appendChild(document.createTextNode("True"));
					radioDIV.appendChild(radioInputBox);
					radioDIV.appendChild(radioLabel);
					var radioInputBox1 = document.createElement("INPUT");
					radioInputBox1.type = 'radio';
					radioInputBox1.name = key;
					radioInputBox1.className = "requiredInput";
					radioInputBox1.id = key;
					radioInputBox1.value = "false";
					radioDIV.appendChild(document.createElement("br"));
					var radioLabel1 = document.createElement("LABEL");
					radioLabel1.appendChild(document.createTextNode("False"));
					radioDIV.appendChild(radioInputBox1);
					radioDIV.appendChild(radioLabel1);
					tdTextBox.align = "center";
				} else {
					inputBox.type = params[key][insideKey].toString();
				}
			}
			if (insideKey == 'num') {
				if (params[key][insideKey] != "") {
					inputBox = document.createElement('select');
					inputBox.style.width = "98%";
					inputBox.id=key;
					var items = params[key][insideKey].split(',');
					for (var a = 0; items.length > a; a++) {
						var option = document.createElement('option');
						option.setAttribute("value", items[a]);
						option.appendChild(document.createTextNode(items[a]));
						inputBox.appendChild(option);
					}
					tdTextBox.setAttribute("align", "center");
				}
			}
			if (insideKey == 'default') {
				inputBox.value = params[key][insideKey];
			}
			if (insideKey == 'mandatory') {
				if (params[key][insideKey] == 'true') {
					isMandatory = true;
					inputBox.required = params[key][insideKey];
				}
			}
			if (insideKey == 'description') {
				inputBox.title = params[key][insideKey];
			}
			if (insideKey == 'snowParamType') {
				if (params[key][insideKey] == 'Reference') {
		            isReferenceField=true;
					inputBox = document.createElement('select');
		 inputBox.setAttribute("class", "form-control");
					inputBox.style.width = "98%";
					inputBox.id=key;
					inputBox.onchange=function(){
			 addSelectedOption(key);
		 };
					var commonGA;
					if (key == 'VpcId') {
						commonGA = new GlideAjax('AMSGetResources');
						commonGA.addParam('sysparm_name', 'getVpcs');
					}
					if (key == 'StackId') {
						commonGA = new GlideAjax('AMSGetResources');
						commonGA.addParam('sysparm_name', 'getStacks');
					}
					if (key == 'AmiId') {
						commonGA = new GlideAjax('AMSGetResources');
						commonGA.addParam('sysparm_name', 'getAmis');
					}
					 if (key == 'SubnetIds') {
						commonGA = new GlideAjax('AMSGetResources');
						commonGA.addParam('sysparm_name', 'getSubnets');
					}
					commonGA.getXMLWait();
					var responseXML = commonGA.getAnswer();
					var idList = responseXML.split(',');
					var noneOption = document.createElement("option");
					noneOption.value = "";
					noneOption.innerHTML = "-- None --";
					inputBox.add(noneOption);
					for (var i = 0; idList.length > i; i++) {
						if (idList[i] != '') {
							var options = document.createElement("option");
							options.value = idList[i];
							options.id=idList[i];
							options.innerHTML = idList[i];
							inputBox.add(options);
						}
					}
				}
			}
		});
		if (ifBooleanContains) {
			tdTextBox.appendChild(radioDIV);
		} else {
		 if(isReferenceField){
			 var refMultiSelectBox = document.createElement("INPUT");
			 refMultiSelectBox.readOnly=true;
			 refMultiSelectBox.setAttribute("class", "form-control");
			 refMultiSelectBox.style.width="50%";
			 refMultiSelectBox.id=key+"selected";
			 tdTextBox.appendChild(refMultiSelectBox);
			 inputBox.style.width="30%";
			 tdTextBox.appendChild(inputBox);
			 var clearBtn = document.createElement("BUTTON");       
			 var btnText = document.createTextNode("Remove All");       
			 clearBtn.appendChild(btnText);
			 clearBtn.onclick=function(){
		 removeSelectedValues(key);
		 };
			 tdTextBox.appendChild(clearBtn);
		 }else{
			tdTextBox.appendChild(inputBox);
		 }
		}
		 if(!isReferenceField){
		 tdTextBox.colspan=3;
		 }
		if (key == 'StackTemplateId') {
			tdLable.style.width = "38%";
			paramTR.appendChild(tdLable);
			paramTR.appendChild(getMandatorySymbolTD());
			tdTextBox.setAttribute("align", "left");
			tdTextBox.style.width = "61%";
			paramTR.appendChild(tdTextBox);
			stackTempIdTable.appendChild(paramTR);
		} else {
			if (isMandatory) {
				paramTR.appendChild(tdLable);
				paramTR.appendChild(getMandatorySymbolTD());
<!-- 				inputBox.className = "requiredInput"; -->
				paramTR.appendChild(tdTextBox);
				paramTable.appendChild(paramTR);
			} else {
		        paramTR.style.backgroundColor = "lightblue";
				paramTR.appendChild(tdLable);
				paramTR.appendChild(getGapTD());
<!-- 				inputBox.className = "optionalInput"; -->
				paramTR.appendChild(tdTextBox);
				advanceParamTable.appendChild(paramTR);
			}
		}
	});
	tableDiv.appendChild(paramTable);
	$("basicFieldsDiv").appendChild(tableDiv);
}
function viewChange(value) {
	if (value == 'advance') {
		stackTempIdTable.appendChild(getCommonFields("Description"));
		stackTempIdTable.appendChild(getCommonFields("Worst-casescenario"));
		stackTempIdTable.appendChild(getCommonFields("Implementationplan"));
		stackTempIdTable.appendChild(getCommonFields("Rollbackplan"));
		stackTempIdTable.appendChild(getCommonFields("Expectedoutcome"));
		$("stackTemplateIdDIV").appendChild(stackTempIdTable);
		$("advanceFieldsDiv").appendChild(advanceParamTable);
	} else {
		 var advancedFields = document.getElementById("advanceFieldsDiv");
		while (advancedFields.firstChild) {
			advancedFields.removeChild(advancedFields.firstChild);
		}
		var stackTempIdTableX = document.getElementById("stackTempIdTable");
		if (stackTempIdTableX) {
			var totalRows = stackTempIdTableX.rows.length;
			for (var i = 0; totalRows > i; i++) {
				stackTempIdTableX.deleteRow(0);				
			}
		}	
	}
}

function startTime(value) {
	if (value == 'schedule') {
		$("scheduledDiv").show();
		var scheduledElements = document.getElementById("scheduledDiv");
		while (scheduledElements.firstChild) {
			scheduledElements.removeChild(scheduledElements.firstChild);
		}
		var regionDiv = document.createElement("DIV");
		var zoneDate = document.createElement("input");
		zoneDate.type = "date";
		regionDiv.appendChild(zoneDate);
		var res = new GlideAjax('AMS_Get_Time_Zone');
		res.addParam('sysparm_name', 'getZones');
		res.getXMLWait();
		var map = res.getAnswer();
		var maps = map.split(',');
		var selectZone = document.createElement("select");
		for (var i = 0; maps.length > i; i++) {
			if (maps[i] != '') {
				var optionZone = document.createElement("option");
				optionZone.value = maps[i];
				optionZone.innerHTML = maps[i];
				selectZone.add(optionZone);
			}
		}
		regionDiv.appendChild(selectZone);
		$("scheduledDiv").appendChild(regionDiv);
	} else {
		$("scheduledDiv").hide();
	}
}
function getGapTD() {
	var gapTD = document.createElement('td');
	gapTD.style.width = "1%";
	return gapTD;
}
function getMandatorySymbolTD() {
	var gapTD = document.createElement('td');
	gapTD.style.width = "1%";
	var symbol = document.createElement("LABEL");
	symbol.appendChild(document.createTextNode("*"));
	symbol.style.fontWeight = "bold";
	gapTD.appendChild(symbol);
	return gapTD;
}
function getValues() {
	var fieldMap = {};
	var mandatoryMap = {};
	var advncMap = {};

	var requiredInputs = mainTable.getElementsByClassName("requiredInput");
    for (var ii = 0; requiredInputs.length > ii; ii++) {
		mandatoryMap[requiredInputs[ii].id] = requiredInputs[ii].value;
	}
	var extraInputs = document.getElementById("stackTempIdTable");
		 if(extraInputs){
    for (var row = 0; extraInputs.rows.length > row; row++) {
		 advncMap[extraInputs.rows[row].cells[0].textContent]=document.getElementById(extraInputs.rows[row].cells[0].textContent).value;
	}	
		 }
	var advncFields=document.getElementById("advanceFieldsTable");
		 if(advncFields){
	 for (var row = 0; advncFields.rows.length > row; row++) {
		 advncMap[advncFields.rows[row].cells[0].textContent]=document.getElementById(advncFields.rows[row].cells[0].textContent).value;
		}
		 }
	fieldMap["mandatoryMap"] = mandatoryMap;
	fieldMap["advncMap"] = advncMap;
	var subject = document.getElementById("subjectValue").value;
	fieldMap["subject"] = subject;
	var description = document.getElementById("descriptionValue").value;
	fieldMap["description"] = description;
	return fieldMap;
}
function getCommonFields(fieldName) {
	var extraFieldTR = document.createElement("tr");
	extraFieldTR.style.backgroundColor = "lightblue";	 
	var labelFieldTD = document.createElement('td');
	labelFieldTD.style.width = "38%";
	var labelBox = document.createElement("LABEL");
	var textnode = document.createTextNode(fieldName);
	labelBox.appendChild(textnode);
	labelBox.style.fontWeight = "bold";
	labelFieldTD.appendChild(labelBox);
	extraFieldTR.appendChild(labelFieldTD);
	var emptyTD = document.createElement("td");
	emptyTD.style.width = "1%";
	extraFieldTR.appendChild(emptyTD);
	var textAreaTD = document.createElement("td");
	textAreaTD.style.width = "61%";
	var inputBox = document.createElement("textarea");
	inputBox.style.width = "98%";
	inputBox.id = fieldName;
	inputBox.maxLength = "5000";
	inputBox.cols = "80";
	inputBox.rows = "40";
	inputBox.className = "optionalInput";
	textAreaTD.appendChild(inputBox);
	extraFieldTR.appendChild(textAreaTD);
	return extraFieldTR;
}	 		 
function addSelectedOption(key){
         var options=document.getElementById(key);
		 var selectedValue=document.getElementById(key+"selected");
		 if(options.value!=null){
			 if(options.value!=''){
		 selectedValue.value=options.value+","+selectedValue.value; 
			 }
		 }
	}
function removeSelectedValues(key){
		 document.getElementById(key+"selected").value="";
	 }
   </script>
	<div id="bodyDiv" style="display: none;text-align: left; padding:25px;margin:25px;">
	<h2>Start time</h2>
		<hr/>
		<!-- <div>
			<input type="radio" name="startTime" onclick="startTime('asap')" checked="true"> ASAP (10 minutes after RFC is submitted)</input><br/>
			<input type="radio" name="startTime" onclick="startTime('schedule')"> Scheduled</input><br/>
		</div> -->
				<div><span><radio-group><div region-container="content"><span><radio-button initialized="true" onclick="startTime('asap')"><label><input id="awsui-radio-button-4" name="awsui-radio-group-3" value="true" type="radio"/></label><label><div region-container="label">ASAP (10 minutes after RFC is submitted)</div></label></radio-button>
			<div><radio-button onclick="startTime('schedule')"><label><input id="awsui-radio-button-5" name="awsui-radio-group-3" value="false" class="awsui-radio-button-input" type="radio"/></label><label><div region-container="label">Scheduled</div></label></radio-button></div></span></div></radio-group></span>
					<div id = "scheduledDiv"></div>
		</div>
		<!--  <div id="region"><input type="text" style = "width : 30%" class="dpic" id="Pay2Div"/>
            </div> --> 
		<div><h2>RFC description</h2>
			<hr/></div>
		<div>
		<div style="text-align : center;height: 50px;">
				<label><b>Basic</b></label>
    <input type="radio" class="option-input radio" name="view" onchange="viewChange('basic')" checked="true"/>
    <input type="radio" class="option-input radio" name="view" onchange="viewChange('advance')"/>
		<label> <b>Advanced</b></label>
				</div></div>
	<div style="text-align:center">	
		<div style="text-align:right;width:85%">
		<p style="width:'75%';" align="center">
			<label><b>Subject *</b></label><span>
			<input id="subjectValue" type="text" size="50"></input>
			</span></p></div>
			<div id="stackTemplateIdDIV" style="width:100%;text-align:right;"></div>
		</div>		
		<h2>Resource information</h2>
		<hr/>
		<div style="text-align:center">
		<div style="text-align:right;width:83%">	
			<p style="width:'75%';" align="center"><label><b>Description *</b></label>
				<span><textarea placeholder="Meaningful information about the resource to be created." cols="50" rows="10" id="descriptionValue"></textarea></span></p>
		</div>
			<!--div id="stackTemplateIdDIV" style="width:100%;text-align:right;"></div-->
			<div id="resourceDIV" style="width:100%;text-align:right;"></div>
		</div>
		<div id="paramDiv">
			<h3>Parameters<i class="fa fa-asterisk" aria-hidden="true">*</i></h3>
			<hr/>
			<div id="basicFieldsDiv" style="width:80%;text-align:right;">
			</div>
			<div id="advanceFieldsDiv" style="width:80%;text-align:right;">
			</div>
			<h5><b><i class="fa fa-asterisk" aria-hidden="true">*  Required</i></b></h5>			
		</div>
	</div>
	
</j:jelly>]]></xml>
    </sys_ui_macro>
</record_update>
