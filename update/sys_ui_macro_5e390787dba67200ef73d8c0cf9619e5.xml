<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_ui_macro">
    <sys_ui_macro action="INSERT_OR_UPDATE">
        <active>true</active>
        <category>general</category>
        <description>To get Sections depending upon the ChangeTypeId</description>
        <media_type/>
        <name>AMS_Get_Section</name>
        <scoped_name>x_109369_ams_AMS_Get_Section</scoped_name>
        <sys_class_name>sys_ui_macro</sys_class_name>
        <sys_created_by>madhav</sys_created_by>
        <sys_created_on>2017-05-10 11:06:39</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>5e390787dba67200ef73d8c0cf9619e5</sys_id>
        <sys_mod_count>1183</sys_mod_count>
        <sys_name>AMS_Get_Section</sys_name>
        <sys_package display_value="AMS" source="x_109369_ams">5b693bf9db427200ef73d8c0cf961927</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AMS">5b693bf9db427200ef73d8c0cf961927</sys_scope>
        <sys_update_name>sys_ui_macro_5e390787dba67200ef73d8c0cf9619e5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-05-30 05:26:11</sys_updated_on>
        <xml><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<j:jelly xmlns:j="jelly:core" xmlns:g="glide" xmlns:g2="null" xmlns:j2="null" trim="false">
<!--g:requires name="scripts/lib/jquery_includes.js"/-->
<style>
      *{font-family: 'Roboto', sans-serif;}
	@keyframes click-wave {
	  0% {
		height: 40px;
		width: 40px;
		opacity: 0.35;
		position: relative;
	  }
	  100% {
		height: 100px;
		width: 100px;
		margin-left: -40px;
		margin-top: -40px;
		opacity: 0;
	  }
	}
	.heading{
			border-bottom:1px solid #cccccc;
			margin-bottom:20px;
	}
	.col-form-label{
			font-weight: bold;
			text-align:right;
	}
		  <!--switch css start-->
		  .switch-wrap{
	display: flex;
	align-items: center;
	justify-content: space-around;
	}
	.switch{
	 background: #cccccc;
	 border-radius: 32px;
	 display: inline-flex;
	 align-items: center;
	 justify-content: center;
	 height: 40px;
	 position: relative;
	 width: 100%;
	 max-width: 110px;
	 margin: auto;
	}
	.switch-wrap label{
	 color: #747474;
	 font-size: 16px;
	 font-weight: 300;
	 line-height: 42px;
	text-align:center;
	 top: 0;
	 text-transform: uppercase;
	 -webkit-transition: color .2s ease;
	 -moz-transition: color .2s ease;
	 -ms-transition: color .2s ease;
	 -o-transition: color .2s ease;
	 transition: color .2s ease;
	}
	.switch input {
	 height: 100%;
	 left: 0;
	 opacity: 0;
	 position: absolute;
	 top: 0;
	 width: 100%;
	 z-index: 2;
	}
	.switch input:checked~.switch-toggle {
	 left: 4px;
	}
	.switch input~:checked~.switch-toggle {
	 left: 72px;
	}
	.switch input:checked {
	 z-index: 0;
	}
	.switch-toggle{
	 background: #4a4a4a;
	 border-radius: 50%;

	 width: 33px; 
	 height: 33px;
	 left: 0;
	 position: absolute;
	 top: 3px;
	 -webkit-transition: left .2s ease;
	 -moz-transition: left .2s ease;
	 -ms-transition: left .2s ease;
	 -o-transition: left .2s ease;
	 transition: left .2s ease;
	 z-index: 1;
	}
		  <!--switch css end-->
		  .justify-center{
			display:flex;
			justify-content:space-between;
			align-items:center;
	}
	td.justify-center{
		padding: 5px 10px;
	}
			.justify-center .radio{
				display:flex;
			}

	.option-input {
	  -webkit-appearance: none;
	  -moz-appearance: none;
	  -ms-appearance: none;
	  -o-appearance: none;
	  appearance: none;
	  position: relative;
	  top: 0;
	  right: 0;
	  bottom: 0;
	  left: 5px;
	  height: 40px;
	  width: 40px;
	  transition: all 0.15s ease-out 0s;
	  background: #cbd1d8;
	  border: none;
	  color: #fff;
	  cursor: pointer;
	  display: inline-block;
	  margin-right: 0.5rem;
	  outline: none;
	  position: relative;
	  z-index: 1000;
	}
	.option-input:hover {
	  background: #9faab7;
	}
	.option-input:checked {
	  background: #40e0d0;
	}
	.option-input:checked::before {
	  height: 40px;
	  width: 40px;
	  position: absolute;
	  content: 'âœ”';
	  display: inline-block;
	  font-size: 26.66667px;
	  text-align: center;
	  line-height: 40px;
	}
	.option-input:checked::after {
	  -webkit-animation: click-wave 0.65s;
	  -moz-animation: click-wave 0.65s;
	  animation: click-wave 0.65s;
	  background: #40e0d0;
	  content: '';
	  display: block;
	  position: relative;
	  z-index: 100;
	}
	.option-input.radio {
	  border-radius: 50%;
	}
	.option-input.radio::after {
	  border-radius: 50%;
	}
</style>
<!-- MomentJS Plugin -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.10/moment-timezone-with-data.js"></script>
<!-- Bootstrap Date-Picker Plugin -->
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.6.4/js/bootstrap-datepicker.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.6.4/css/bootstrap-datepicker3.min.css"/>
<!-- Bootstrap Tags-Input Plugin -->
<link rel="stylesheet" href="https://bootstrap-tagsinput.github.io/bootstrap-tagsinput/dist/bootstrap-tagsinput.css"/>
<script src="https://bootstrap-tagsinput.github.io/bootstrap-tagsinput/dist/bootstrap-tagsinput.min.js"></script>	

	
<script>
	var $snowJQ = jQuery.noConflict();
	
    function hideUIMacro(){
		try {
			$snowJQ("#bodyDiv").empty();//$snowJQ("dynForm").remove();
			console.log('REMOVED DYNFORM ............. ');
		}
		catch(err) {
			console.log('Nothing to remove ' + err.message);
		} 
	}
<!-- var advanceParamTable = document.createElement("table");
advanceParamTable.style.width = "100%";
advanceParamTable.id = "advanceFieldsTable";
var tableDiv = document.createElement("DIV");
tableDiv.id = "fieldsTable";
var paramTable = document.createElement("table");
paramTable.id = "mainTable";
var stackTempIdTable = document.createElement("table");
stackTempIdTable.style.width = "65%";
stackTempIdTable.id = "stackTempIdTable";	
var resourceTableDiv = document.createElement("DIV");
resourceTableDiv.id = "resourceDIV";
var resourceTable = document.createElement("table");
resourceTable.style.width = "65%";
resourceTable.id = "resourceTable";
resourceTableDiv.appendChild(resourceTable); -->

	
function setChangeTypeId(id){
	var ga = new GlideAjax('Get_RFC_Form_Fields');
	ga.addParam('sysparm_name', 'getFields');
	ga.addParam('sysparm_changeTypeId', id);
	ga.getXMLWait();
	var res = ga.getAnswer();
	var params = JSON.parse(res);
	console.log(JSON.stringify(params , null, 2));
	buildHtmlTable(params);
	//return;
}
	
<!-- function startTime(value) {
	if (value == 'schedule') {
		$("scheduledDiv").show();
		var scheduledElements = document.getElementById("scheduledDiv");
		while (scheduledElements.firstChild) {
			scheduledElements.removeChild(scheduledElements.firstChild);
		}
		var regionDiv = document.createElement("DIV");
		var zoneDate = document.createElement("input");
		zoneDate.type = "date";
		regionDiv.appendChild(zoneDate);
		var res = new GlideAjax('AMS_Get_Time_Zone');
		res.addParam('sysparm_name', 'getZones');
		res.getXMLWait();
		var map = res.getAnswer();
		var maps = map.split(',');
		var selectZone = document.createElement("select");
		for (var i = 0; maps.length &gt; i; i++) {
			if (maps[i] != '') {
				var optionZone = document.createElement("option");
				optionZone.value = maps[i];
				optionZone.innerHTML = maps[i];
				selectZone.add(optionZone);
			}
		}
		regionDiv.appendChild(selectZone);
		$("scheduledDiv").appendChild(regionDiv);
	} else {
		$("scheduledDiv").hide();
	}
} -->
	  
function validateAllInputs(){
	var requiredIDs = document.querySelectorAll(".requiredID");
	var isValid = true;
	for (var i = 0; requiredIDs.length > i; i++) {
		var inputVar = requiredIDs[i].querySelectorAll('input, textarea, select, radio');
		if (inputVar.length >0 ) {		
			console.log('checking ' + inputVar[0].getAttribute("name"));
			if(!inputVar[0].value) {
				console.log(' MISSING ' + inputVar[0].getAttribute("name") );
				isValid = false;				
			} 
		}
	}
	
	if (!isValid) alert('Please enter all required data');
	console.log('RETURNING isValid from validateAllInputs = ' + isValid);
	return(isValid);
	
}
	
function getValues() {
		 <!-- var basicexecutionParameters={};
		 var advancedexecutionParameters={};
	     fieldMap["basicexecutionParameters"] = basicexecutionParameters;
		 fieldMap["advancedexecutionParameters"] = advancedexecutionParameters; -->
		 var executionparameters_properties={};
		 var executionparameters_params={};
		 var fieldMap={};
		 <!-- var subject = document.getElementById("Subject").value;
		 var fieldMap={};
		 fieldMap["Subject"] = subject;
		 var description = document.getElementById("Description").value;  
		 fieldMap["Description"] = description; -->
	     	
		     var parametersIDs = document.querySelectorAll(".parameters");
			 for (var i = 0; parametersIDs.length > i; i++) {
				 var inputVar = parametersIDs[i].querySelectorAll('input, textarea, select, radio');
				 if (inputVar.length >0 ) {		
				   if(inputVar[0].value) 
				     if(inputVar[0].getAttribute("name") ) {
				    	executionparameters_params[inputVar[0].getAttribute("name")] = getInputType(inputVar[0].value, inputVar[0].getAttribute("type"));
				    } 
				 }
			 }
			var propertiesIDs = document.querySelectorAll(".properties");
			 for (var i = 0; propertiesIDs.length > i; i++) {
				 var inputVar = propertiesIDs[i].querySelectorAll('input, textarea, select, radio');
				 if (inputVar.length >0 ) {
				   if(inputVar[0].value) 
				   if(inputVar[0].getAttribute("name") ) {
				    	executionparameters_properties[inputVar[0].getAttribute("name")] = getInputType(inputVar[0].value, inputVar[0].getAttribute("type"));
				    }
				 }
			 }
			var propertiesTagsInputs = document.querySelectorAll(".properties input[class='form-control select-multiple']");
			for (var i = 0; propertiesTagsInputs.length > i; i++) {
				if (propertiesTagsInputs[i].value){
				console.log('Handling param ' + propertiesTagsInputs[i].getAttribute("name") );
				executionparameters_properties[propertiesTagsInputs[i].getAttribute("name")] = getInputType(propertiesTagsInputs[i].value.split(','), Array) ;
				console.log(propertiesTagsInputs[i].value.split(','));
				}
			}
			
			var parametersTagsInputs = document.querySelectorAll(".parameters input[class='form-control  select-multiple']");
			for (var i = 0; parametersTagsInputs.length > i; i++) {
				if (parametersTagsInputs[i].value){
				console.log('Handling param ' + parametersTagsInputs[i].getAttribute("name") );
				executionparameters_params[parametersTagsInputs[i].getAttribute("name")] = getInputType(parametersTagsInputs[i].value.split(','), Array)  ;
				}
				console.log(parametersTagsInputs[i].value.split(','));
			}
			<!-- var multipleElements = document.querySelectorAll(".select-multiple > input");
 			for (var i = 0; multipleElements.length > i; i++) {
 				var el = multipleElements[i].getAttribute("name");
				var val = $snowJQ('#dynForm')
        					.find('[name="' + multipleElements[i].getAttribute("name") + '"]')
        					.tagsinput('items');
				//fallback if the tags plugin doesn't work
				if(!val) {
					val = $snowJQ('#dynForm')
        					.find('[name="' + multipleElements[i].getAttribute("name") + '"]')
        					.val()
							.split(',');
				}
 				executionparameters_params[el] = val;
 			} -->
			<!-- executionparameters_properties["requestedStartTime"] = (document.getElementById("requestedStartTime").value);
			executionparameters_properties["Parameters"] = executionparameters_params; -->
			executionparameters_properties["requestedStartTime"] = (document.getElementById("requestedStartTime").value);
			executionparameters_properties["requestedEndTime"] = (document.getElementById("requestedEndTime").value);
			executionparameters_properties["Parameters"] = executionparameters_params;
			
			<!-- console.log("toSubmit value = " + JSON.stringify(trimEmptyValues(executionparameters_properties), null, 2) );
			var subject = document.getElementById("Subject").value;
			executionparameters_properties["Subject"] = subject;
			var description = document.getElementById("Description").value;  
			executionparameters_properties["Description"] = description;
			console.log('FORM VALUES ' + executionparameters_properties); -->
			return trimEmptyValues(executionparameters_properties) ;
			
		
}
<!-- function getDynamicFieldValues(){
		 var formFields=document.getElementById("dynForm");
		 var fields= {};
		 fields["Subject"]=document.getElementById("subject").value;
		 fields["Description"]=document.getElementById("Description").value;
		 var allFields=document.getElementsByClassName("form-group");
		 var dynFields={};
		  for (var ii = 0; allFields.length > ii; ii++) {
				dynFields[allFields[ii].id] = allFields[ii].value;
			}
		 fields["allFields"]=dynFields;
		 return fields;
} -->
	
function getInputType(value, valuetype) {
		if(value === "")
			return "";
		else if(value === "true" || value === "false") {
			if (valuetype == "radio") return eval(value);
		} else if(!Number.isNaN(Number(value))) {
			if (valuetype == "number") {
				return parseFloat(value);
			} else if (valuetype == "text") {
				//console.log('returning ' + value.trim());
				return value.trim();
			}
		} else if(Array.isArray(value)) {
			if (valuetype == "text") return value.map(Function.prototype.call, String.prototype.trim);
			console.log('returning ' + value);
		} else 
			return value;
}	   
	
function trimEmptyValues(obj){
 var propNames = Object.getOwnPropertyNames(obj);
  for (var i = 0; propNames.length > i; i++) {
    var propName = propNames[i];
    if (obj[propName] === null || obj[propName] === undefined || obj[propName] === "") {
      delete obj[propName];
    } else if (typeof(obj[propName]) === "object"){
    		trimEmptyValues((obj[propName]));
    	}
  }
  return obj;
}
	
function createDate(){
		//console.log('Changing date');
		var dateChosen = $snowJQ('#datePicker').datepicker('getDate');
		var timeChosen = $snowJQ("#time").val().split(":") ;
		var timezoneChosen = $snowJQ("#timezones").val() ;
		if (dateChosen) {
			dateChosen.setHours(timeChosen[0]);
			dateChosen.setMinutes(timeChosen[1]);
			var myDateTime = moment(dateChosen).utc();//.format();
			//myDateTime = myDateTime.split('+')[0];
			var finalDateChosen = moment.tz(myDateTime, timezoneChosen);
			finalDateChosen.format();
			var finalDateUTC = moment.utc(finalDateChosen);
			$snowJQ("#requestedStartTime").val(finalDateUTC.toISOString());
			var finalEndDataChosen = finalDateUTC.add(1,'days');
			$snowJQ("#requestedEndTime").val(finalEndDataChosen.toISOString());
		}
		
}
	
function prepareDateTimePicker(){
		var container=$snowJQ('.dynForm').length>0 ? $snowJQ('.dynform').parent() : "body";
		console.log(container);
		
		var now = moment().add(15,'m').format("HH:mm");
		var currDate = moment().toString();
		$snowJQ('#time')
		.on("keyup", function(e){
			var key=String.fromCharCode(e.keyCode);
			//console.log(key);
			var value=$snowJQ(this).val();
			<!--if(!(key>=0&&key<=9))$(this).val($(this).val().substr(0,$(this).val().length-1));-->
    		if(value.length==2)$snowJQ(this).val($snowJQ(this).val()+':');
		})
		.on("change", function(e){createDate();updateRfcJsonValues()})
		$snowJQ("#time").attr("placeholder" , now);
		$snowJQ("#time").val(now);
		console.log('Time set ' + $snowJQ("#time").val());
		
		var timezoneNames = moment.tz.names();
		console.log('Timezone guess ' + moment.tz.guess());
		var x = document.getElementById("timezones");
		
		for (var i = 0; timezoneNames.length > i; i++) {
			var option = document.createElement("option");
			option.text = timezoneNames[i];
			option.value = timezoneNames[i];
			x.add(option);
  		}  		
		
		$snowJQ("#timezones option[value= '" + moment.tz.guess() + "'] ").attr("selected" , "selected");
		var tmp = $snowJQ("#timezones").find(":selected").text();
		console.log('Timezone set ' + tmp );		
		
		$snowJQ('#timezones')
		.on("change", function(e){createDate();updateRfcJsonValues()})
		
		$snowJQ('#datePicker')
		.datepicker({
            format: 'yyyy/mm/dd',
			container: container,
			todayHighlight: true,
			autoclose: true,
			startDate: '+0d',
			todayBtn:true,
        })
		.on('changeDate', function(e) {
			createDate();
			updateRfcJsonValues();
        })
        .on('hide',function(){ // nasty hack due to https://github.com/uxsolutions/bootstrap-datepicker/issues/478 bug
			var a = $snowJQ(this);
			setTimeout(function(){a.show();},2);
		});
		//$snowJQ('#datePicker').datepicker('setDate', currDate);
		$snowJQ("#startDate").val($snowJQ("#datePicker").datepicker('getDate'));

		console.log('Date set ' + $snowJQ('#datePicker').datepicker('getDate'));
		console.log('Date set ' + $snowJQ('#startDate').val());
		
		createDate();
	}
	
	function updateRfcJsonValues(){
		var rfcJson = {};
		rfcJson["executionParameters"] = getValues();
		//console.log(rfcJson);
		//print the JSON being created
		(document.getElementById("rfcJson")).value = JSON.stringify(rfcJson);	
	}
	 	
	function addIds(componentID, id){
		var component=document.getElementById(componentID.name).value;
		if(component){
				if(component.include(id)){
					alert(id+" already added!!");
				return;
			}else{
					document.getElementById(componentID.name).value=component+","+id;
			}
		}else{
			document.getElementById(componentID.name).value=id;
		}
	}
	
	function clearAll(nodeName){
	var component=document.getElementById(nodeName).value;
	if(nodeName){
		document.getElementById(nodeName).value="";
	return null;
		}
	}
	
	function validate(item) {
		var isValid = item[0].checkValidity();
		
		try{
			if(!isValid) {
				<!-- if(item[0].getAttribute("data-role") === "tagsinput"){
					// special treatment for these
					//console.log(item[0].getAttribute("name"));
					if(item[0].getAttribute("name") === "SubnetIds"){
						// TODO TEMP HACK
						isValid = true;
						item[0].parentElement.parentElement.classList.remove('bg-danger')
					}
					//subnet-439f7769,subnet-fdaf50a5
				} else  -->
				item[0].parentElement.parentElement.classList.add('bg-danger');
			} else {				
				item[0].parentElement.parentElement.classList.remove('bg-danger');
				updateRfcJsonValues();		
			}
		} catch (err){
			console.log('Could not apply bg-danger to the row');
		}
			
}

function validateArrays(inboundItem){ // keep in mind that the item here represents another element that shares the name BUT we need to find the element with the same ID
	var item = document.getElementById(inboundItem.name);
	var valueOfItem = item.value;
	var items = valueOfItem.split(',');
	var minItems = item.getAttribute("minItems");
	var maxItems = item.getAttribute("maxItems");	
	console.log(item);
	console.log('validating item name ' + item.name + ' with length = ' + items.length + ' against min = ' + item.getAttribute("minItems") + ' max = ' + item.getAttribute("maxItems") );
	if (!minItems) minItems = -1; // no minimum
	if (!maxItems) maxItems = Infinity; // no maximum really
	
	if ( minItems > items.length || items.length > maxItems){
		console.log(item.name + ' is not between min=' + minItems + ' and max=' + maxItems);
		item.parentElement.parentElement.classList.add('bg-danger');
		return false;
	} else {
		item.parentElement.parentElement.classList.remove('bg-danger');
		return true;
	}
}
	
function buildHtmlTable(params) {
	   
      var bodyDiv = document.getElementById('bodyDiv');
		try {
			$snowJQ("dynForm").remove();
		}
		catch(err) {
			console.log('Nothing to remove ' + err.message);
		}
		var formX = document.createElement("form");
		formX.setAttribute("id", "dynForm");
		var startTimeContainer = document.createElement("div");
		startTimeContainer.setAttribute("class", "container");
		startTimeContainer.setAttribute("id", "startTimeContainer");
		var startTimeContainerRow = document.createElement("div");
		startTimeContainerRow.setAttribute("class", "row");
		startTimeContainerRow.innerHTML='<h2>Start time</h2><hr />';
		startTimeContainer.appendChild(startTimeContainerRow);
		var startTimeContainerRowDiv = document.createElement("div");
		startTimeContainerRowDiv.setAttribute("class", "form-group");
		startTimeContainerRowDiv.innerHTML = 
		'<div class="row requiredID properties">\
			<div class="radio">\
				<label>\
					<input type="radio" value="true" checked="true" data-toggle="collapse" name="timeZone" data-target="#startTimDiv"/>ASAP (10 minutes after RFC is submitted)\
				</label>\
			</div>\
			<div class="radio">\
				<label>\
					<input type="radio" value="false" data-toggle="collapse" name="timeZone" data-target="#startTimDiv"></input>Scheduled</label>\
			</div>\
		</div>\
		<div class="row properties">\
		  <div class="form-group collapse" id="startTimDiv">\
			<div class="col-sm-4 date">\
					<div class="input-group date" id="datePicker" >\
	  					<input type="text" class="form-control"  name="startDate"/><span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>\
					</div>\
			</div>\
		  <div class="col-sm-2">\
					<div class="input-group">\
						<input class="form-control" id="time" name="time" placeholder="00:00" type="text" maxlength="5"/>\
					</div>\
		  </div>\
		  <div class="col-sm-4">\
					<div class="input-group">\
						<select class="form-control selectpicker" id="timezones" name="timezones" placeholder="Timezones" />\
					</div>\
		  </div>\
		  <label class="control-label col-sm-2 requiredField" for="date">\
					<span style="display:flex; align-items:center;height: 40px;" class="col-sm-1 pull-right glyphicon glyphicon-info-sign" data-toggle="tooltip" title="The start date must be at least 10 minutes after the time of RFC submission."></span>\
		  </label>\
		  </div>\
	</div>\
	<div><input type="hidden" name="requestedStartTime" id="requestedStartTime"/></div>\
	<div><input type="hidden" name="requestedEndTime" id="requestedEndTime"/></div>';
	
		startTimeContainer.appendChild(startTimeContainerRowDiv);
		formX.appendChild(startTimeContainer);

		var rfcDescriptionContainer = document.createElement("div");
		rfcDescriptionContainer.setAttribute("class", "container");
		rfcDescriptionContainer.setAttribute("id", "rfcDescriptionContainer");
		var rfcDescriptionContainerRow = document.createElement("div");
		rfcDescriptionContainerRow.setAttribute("class", "row");
		rfcDescriptionContainerRow.innerHTML = '
      <div class="row heading">\
         <div class="col-sm-5">
            <h2>RFC description</h2>
         </div>\
         <div class="col-sm-4">\
            <div class="switch-wrap">\
               <label class="col-sm-4" for="md-switch-on">Basic</label>\
               <div class="switch col-sm-4">\
                  <input type="radio" data-toggle="collapse" data-target=".optionalID" name="md-switch" id="md-switch-off" checked="true" />\
                  <input type="radio" data-toggle="collapse" data-target=".optionalID" name="md-switch" id="md-switch-on" />\
                  <span class="switch-toggle" />\
               </div>\
               <label for="md-switch-off" class="col-sm-4">Advanced</label>\
            </div>\
         </div>\
         <span class="justify-center glyphicon glyphicon-info-sign" style="height:40px; justify-content:center;" data-toggle="tooltip" title="Basic and advanced view of rfc creation." />\
      </div>\
      <div class="form-group requiredID properties">\
         <label class="col-sm-4 col-form-label" for="Subject">Subject*</label>\
         <div class="col-sm-7">\
            <input type="text" class="form-control" rows="5" name="Subject" id="Subject"  onchange="updateRfcJsonValues()"/>\
         </div>\
      </div>\
	   
      <div class="form-group bg-info optionalID properties collapse">\
         <label class="col-sm-4 col-form-label" for="description">Description</label>\
         <div class="col-sm-7">\
            <textarea class="form-control" rows="5" name="description" id="advncDescription" onchange="updateRfcJsonValues()"/>\
         </div>\
      </div>\
      <div class="form-group bg-info optionalID properties collapse">\
         <label class="col-sm-4 col-form-label" for="worstCasesScenario">Worst-case scenario</label>\
         <div class="col-sm-7">\
            <textarea class="form-control" rows="5" name="worstCasesScenario" id="worstCasesScenario" onchange="updateRfcJsonValues()"/>\
         </div>\
      </div>\
      <div class="form-group bg-info optionalID properties collapse">\
         <label class="col-sm-4 col-form-label" for="implementationPlan">Implementation plan</label>\
         <div class="col-sm-7">\
            <textarea class="form-control" rows="5" name="implementationPlan" id="implementationPlan" onchange="updateRfcJsonValues()"/>\
         </div>\
      </div>\
      <div class="form-group bg-info optionalID properties collapse">\
         <label class="col-sm-4 col-form-label" for="rollbackPlan">Rollback plan</label>\
         <div class="col-sm-7">\
            <textarea class="form-control" rows="5" name="rollbackPlan" id="rollbackPlan" onchange="updateRfcJsonValues()"/>\
         </div>\
      </div>\
      <div class="form-group bg-info optionalID properties collapse">\
         <label class="col-sm-4 col-form-label" for="expectedOutcome">Expected outcome</label>\
         <div class="col-sm-7">\
            <textarea class="form-control" rows="5" name="expectedOutcome" id="expectedOutcome"  onchange="updateRfcJsonValues()"/>\
         </div>\
      </div>
      ';
		rfcDescriptionContainer.appendChild(rfcDescriptionContainerRow);
		formX.appendChild(rfcDescriptionContainer);		
		var resourceInformationContainer = document.createElement("div");
		resourceInformationContainer.setAttribute("class", "container");
		resourceInformationContainer.setAttribute("id", "resourceInformationContainer");
		var resourceInformationContainerRow = document.createElement("div");
		resourceInformationContainerRow.setAttribute("class", "row");
		resourceInformationContainerRow.innerHTML='
      <h2>Resource information</h2>
      <hr />
      ';
		resourceInformationContainer.appendChild(resourceInformationContainerRow);
	   
	   var parameterContainer= document.createElement("div");
		parameterContainer.setAttribute("class", "container");
		parameterContainer.setAttribute("id", "parameterContainer");
		var parameterContainerRow = document.createElement("div");
		parameterContainerRow.setAttribute("class", "row");
		parameterContainerRow.innerHTML='
      <h3>Parameters</h3>
      <hr />
      ';
		parameterContainer.appendChild(parameterContainerRow);
		for (var i = 0; Object.keys(params).length > i; i++) {
			var tmp = params[Object.keys(params)[i]];
			var inputType;
			switch (tmp.paramType) {
				case "string":
					if (tmp.snowParamType === "String" ){
						inputType = "text"
					} else if (tmp.snowParamType === "Choice" || tmp.snowParamType=== "Reference"){
						inputType = "select"
					} 			 
					break;
				case "array":
					if(tmp.snowParamType=== "Reference"){
					   inputType = "select";
					} else{
					   inputType = "select-multiple"
					}
					break;
				case "number":
					inputType = "number"
					break;
				case "integer":
					inputType = "number"
					break;
				case "boolean":
					inputType = "boolean";
					break;
				<!-- case "array":
					inputType = "List"
					break; -->
				default:
					inputType = "text"

			}
	   
			var divX = document.createElement("div");
			var collapseOrNot = (tmp.mandatory != "true") ? "collapse" : "";
			var optionalOrRequiredID = (tmp.mandatory != "true") ? "optionalID" : "requiredID";
			var optionalFieldBG = (tmp.mandatory != "true") ? " bg-info " : "";
			divX.setAttribute("class", "form-group" + optionalFieldBG + " " + optionalOrRequiredID + " " + collapseOrNot + " " + tmp.awsParamType);
		    
			var str = "";
			var mand = (tmp.mandatory === "true") ? "*" : "";
			var mandStr = (tmp.mandatory === "true") ? "required" : "";
			str += '<label class="col-sm-4 col-form-label" for="' + tmp.paramName + '">' + tmp.paramName + mand + '</label>';
	
			var additionalTypes="";
			if (tmp.default) additionalTypes += 'placeholder="' + tmp.default + '" ';
			if (tmp.minimum) additionalTypes += 'min="' + tmp.minimum + '" ';
			if (tmp.maximum) additionalTypes += 'max="' + tmp.maximum + '" ';
			if (tmp.pattern) additionalTypes += 'pattern="' + tmp.pattern + '" ';
			
			// the following is not required if we return the params the same order that AWS sends them
			if(tmp.paramName === "StackTemplateId"){
				divX.setAttribute("class","form-group bg-info optionalID properties collapse");
			 }
			
			if (inputType === 'text' || inputType === 'number') {             
				if(tmp.pattern){
				str += '<div class="col-sm-7" >';
			    str += '<input type="' 
					+ inputType + 
					'" class="form-control" name="' 
					+ tmp.paramName + 
					'" id="' 
					+ tmp.paramName + 
					'" value="' 
					+ tmp.default + 
					'"  min="' 
					+ tmp.minimum + 
					'" max="' 
					+ tmp.maximum + 
					'" onchange="validate($snowJQ(this))" 
					pattern="' + tmp.pattern + '" /></div>';
					}
				else{
					str += '<div class="col-sm-7" >';
					str += '<input type="' 
					+ inputType + 
					'" class="form-control" name="' 
					+ tmp.paramName + 
					'" id="' 
					+ tmp.paramName + 
					'" value="' 
					+ tmp.default + 
					'"  min="' 
					+ tmp.minimum + 
					'" max="' 
					+ tmp.maximum + 
					'" onchange="validate($snowJQ(this))" /></div>';}
	}
	
			if (inputType === 'boolean') {            
				if(tmp.snowParamType == 'True/False'){
					var checkedStr = ((tmp.default === true) ? true: false);
					str += '<div class="col-sm-7"><div class="radio"><label><input id="' + tmp.paramName + '" type="radio" name="' + tmp.paramName + '" value="true" checked="'+checkedStr+'"  onchange="updateRfcJsonValues()">true</input></label></div>';
					str += '<div class="radio">
							<label>
							   <input type="radio" name="' + tmp.paramName + '" value="false" checked="'+checkedStr+'">false</input>
							</label>
						 </div>
					  </div>';
				}
			}
			if (inputType === 'select-multiple'){
				str += '<div class="col-sm-7">' ;
			    str += '<input type="' 
					+ inputType + 
					'" class="form-control select-multiple" name="' 
					+ tmp.paramName + 
					'" id="' 
					+ tmp.paramName + 
					'" placeholder="' 
					+ tmp.default + 
					'"  min="' 
					+ tmp.minimum + 
					'" max="' 
					+ tmp.maximum + 
					'" onchange="validate($snowJQ(this)); updateRfcJsonValues()" /></div>';
			}
	
			if (inputType === 'select'){
				 if(tmp.snowParamType !== "Reference"){
					 if(tmp.paramName === "StackTemplateId"){
						 str += '<div class="col-sm-7"><div class="radio">
									<label>
									   <input id="' + tmp.paramName + '" name="' + tmp.paramName + '" type="radio" value="' + tmp.num + '" checked="checked">'+tmp.num+'</input>
									</label>
								 </div>
							  </div>
							  ';
					  } else {
						var options = tmp.num.split(',');
						var optionStr = '<option value="" selected="true" disabled="true">None</option>';
						options.forEach( (option) => 
						optionStr+= '<option value="' + option + '">' + option + '</option>' );
						str += '<div class="col-sm-7" id="'+ tmp.paramName +'"><select class="form-control" id="'+ tmp.paramName +'" name="'+ tmp.paramName +'">'+ optionStr +'</select></div>';    
					  }
				}else{
				str += '
				 <div class="col-sm-4">
					 <input id="' + tmp.paramName + '" name="' + tmp.paramName + '" type="text" class="form-control  select-multiple" readonly="true" minItems="' + tmp.minItems + '" maxItems="' + tmp.maxItems + '"></input>					
				  </div> ';
				var commonGA;
				if (tmp.paramName == 'VpcId') {
				commonGA = new GlideAjax('AMSGetResources');
				commonGA.addParam('sysparm_name', 'getVpcs');
				}
				if (tmp.paramName == 'StackIds' || tmp.paramName == 'StackId') {
				commonGA = new GlideAjax('AMSGetResources');
				commonGA.addParam('sysparm_name', 'getStacks');
				}
				if (tmp.paramName == 'AmiId') {
				commonGA = new GlideAjax('AMSGetResources');
				commonGA.addParam('sysparm_name', 'getAmis');
				}
				if (tmp.paramName.includes("Subnet")) {
				commonGA = new GlideAjax('AMSGetResources');
				commonGA.addParam('sysparm_name', 'getSubnets');
				}
			   commonGA.getXMLWait();
			   var responseXML = commonGA.getAnswer();
			   var options = responseXML.split(',');
			   var paramName=tmp.paramName;
			   var optionStr = '<option value="" selected="true">' + 'none' + '</option>';
			   options.forEach( (option) =>
			   optionStr += '<option value="' + option + '" >' + option + '</option>' );

			   str += '<div class="col-sm-2"><select class="form-control" onchange="addIds(this, this.value); updateRfcJsonValues(); validateArrays(this);" name="' + tmp.paramName +'"> ' 
			   + optionStr + '</select></div>';
				str += '<button type="button" onclick="clearAll(this.name)" name="' + tmp.paramName +'" class="btn btn-default">Clear All</button>';
				 }
			}
			
			if(inputType === 'List'){
				if (tmp.paramName === 'SubnetIds') {
				   str += '
				 <div class="col-sm-4">
					 <div>
						<label>
						   <input id="' + tmp.paramName + '" name="' + tmp.paramName + '" type="text" value="' + tmp.num + '" class="form-control"  onchange="validate($snowJQ(this))"></input>
						</label>
					 </div>
				  </div> ';
			   var commonGA = new GlideAjax('AMSGetResources');
			   commonGA.addParam('sysparm_name', 'getSubnets');
			   commonGA.getXMLWait();
			   var responseXML = commonGA.getAnswer();
			   var options = responseXML.split(',');
			   var optionStr = '<option value="" selected="true">' + 'none' + '</option>';
			   options.forEach( (option) =>
			   optionStr += '<option value="' + option + '">' + option + '</option>' );
			   str += '<div class="col-sm-2" id="' 
				   + tmp.paramName + 
				   '" ><select class="form-control" id="' 
				   + tmp.paramName + 
				   '" name="' 
				   + tmp.paramName + 
				   '"> ' 
			   + optionStr + 
			   '</select></div>';
			   }
		 }
		 str += '
      <span style="display:flex; align-items:center;height: 40px;" class="col-sm-1 pull-right glyphicon glyphicon-info-sign" data-toggle="tooltip" title="' + tmp.description + '" />
      ';
			divX.innerHTML = str;
		 if(tmp.paramName === 'Description' ||tmp.paramName === 'StackTemplateId'){
	
				resourceInformationContainer.appendChild(divX);
		 }else{
			parameterContainer.appendChild(divX);
		 }
		}
		
		var rfcJsonContainer = document.createElement("div");
		rfcJsonContainer.setAttribute("class", "container");
		rfcJsonContainer.setAttribute("id", "rfcJsonContainer");
		var rfcJsonContainerRow = document.createElement("div");
		rfcJsonContainerRow.setAttribute("class", "row");
		rfcJsonContainerRow.innerHTML='<h2>RFC JSON</h2><hr/>\
		<div class="row">\
			<div class="col-sm-12">\
				<textarea class="form-control" rows="5" name="rfcJson"  id="rfcJson" readonly="true"></textarea>\
			</div>\
		</div>\
		';
		rfcJsonContainerRow.appendChild(rfcJsonContainer);	
	
		formX.appendChild(resourceInformationContainer);
		formX.appendChild(parameterContainer);
		formX.appendChild(rfcJsonContainerRow);
		bodyDiv.appendChild(formX);
		prepareDateTimePicker(); 
		updateRfcJsonValues();
		
	}
   </script>
   <div id="bodyDiv" style="text-align: left; padding:25px;margin:25px;" />
</j:jelly>]]></xml>
    </sys_ui_macro>
</record_update>
