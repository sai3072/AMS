<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_109369_ams.RfcPOC </api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>RfcPOC </name>
        <script><![CDATA[var nextToken = "";
var body = {};// initialize the request body
var maxResults = parseInt(gs.getProperty('x_109369_ams.Ams.NextToken.MaxResults'));
var logger = gs.getProperty('x_109369_ams.debug.AMSRestCalls');// get the property value of AMSRestCalls(Boolean Value)
var totalResults = 0;
var RfcPOC  = Class.create();
RfcPOC .prototype = {
	initialize: function() {
		this.amsUtil = new AMSApiUtil(); // create object for AMSApiUtil initialize corresponding import set table name
		this.changeTypeCategories = 'x_109369_ams_import_set_rfc_categories';
		this.changeTypeSubcategories = 'x_109369_ams_import_set_rfc_subcategories';
		this.changeTypeItems = 'x_109369_ams_import_set_rfc_items';
		this.changeTypeOperations = 'x_109369_ams_import_set_rfc_operations';
		this.severityLevels = '';
		this.changeTypeVersion='x_109369_ams_import_set_change_type_version';
		this.changeTypeClassifications='x_109369_ams_import_set_rfc_classification';
		// intialize the service type
		this.supportService = 'support';
		this.changeService = 'amscm';
		this.provisioningService = 'amsskms';
		this.totalCorrespondence = '';// intialize Correspondence
	},
	getRfcListChangeTypeCategoriesAndInsert : function(nextToken)
	{
		body = {
			"maxResults" : maxResults,
			"nextToken" : nextToken
		};
		var parsedResponseBody = this.amsUtil.getParsedResponseBody(this.changeService, 'ListChangeTypeCategories', body);// raise arequest
		var jsonBody = JSON.stringify(parsedResponseBody);
		if (jsonBody.indexOf('ChangeTypeCategories') > -1){ // Check for Rfc in Response body
			for (var count = 0; count < parsedResponseBody.ChangeTypeCategories.length; count++){
				// loop throughthecategories
				var rfcCategoryGR = new GlideRecord(this.changeTypeCategories);
				rfcCategoryGR.initialize();
				rfcCategoryGR.u_rfc_categories_category = parsedResponseBody.ChangeTypeCategories[count];// RFC Category
				rfcCategoryGR.u_rfc_categories_amazon_request_id = parsedResponseBody.requestId["x-amzn-RequestId"];// Ams generated Request Id
				rfcCategoryGR.insert();
			}
			nextToken = parsedResponseBody.nextToken;
			if (undefined !== nextToken){ // check for nexttoken in respose
				this.getRfcListChangeTypeCategoriesAndInsert(nextToken);// call the api with next token
			}
			return true;
		}
		else return false;
		},
	// function to get ListChangeTypeSubcategories for RFC
	getRfcListChangeTypeSubcategoriesAndInsert : function(category) 
	{
		body = {
			"Category" : category,
			"locale" : "en",
			"maxResults" : maxResults,
			"nextToken" : nextToken
		};
		var parsedResponseBody = this.amsUtil.getParsedResponseBody(this.changeService, 'ListChangeTypeSubcategories', body);// raise a request
		var jsonBody = JSON.stringify(parsedResponseBody);
		if (jsonBody.indexOf('ChangeTypeSubcategories') > -1){ // Check for Rfc in Response body
			for (var count = 0; count < parsedResponseBody.ChangeTypeSubcategories.length; count++){
				var rfcSubcategoryGR = new GlideRecord(this.changeTypeSubcategories);
				rfcSubcategoryGR.initialize();
				rfcSubcategoryGR.u_rfc_subcategories_category = category;
				rfcSubcategoryGR.u_rfc_subcategories_subcategory = parsedResponseBody.ChangeTypeSubcategories[count];// RFC Category
				rfcSubcategoryGR.u_rfc_subcategories_amazon_request_id = parsedResponseBody.requestId["x-amzn-RequestId"];// Ams generated Request Id
				rfcSubcategoryGR.u_rfc_catsubcategory=category+parsedResponseBody.ChangeTypeSubcategories[count];//catsubcategory field 
				rfcSubcategoryGR.insert();
			}
			return true;
		} 
		else return false;
	},
	// Function to ListChangeTypeItems for RFC
	getRfcListChangeTypeItemsAndInsert : function(category, subcategory,nextToken) 
	{
		body = {
			"Category" : category,
			"locale" : "en",
			"maxResults" : maxResults,
			"nextToken" : nextToken,
			"Subcategory" : subcategory
		};
		var parsedResponseBody = this.amsUtil.getParsedResponseBody(this.changeService, 'ListChangeTypeItems', body);// raise a request
		var jsonBody = JSON.stringify(parsedResponseBody);
		if (jsonBody.indexOf('ChangeTypeItems') > -1){ // Check for ChangeTypeItems in Response body
			for (var count = 0; count < parsedResponseBody.ChangeTypeItems.length; count++){
				var rfcItemGR = new GlideRecord(this.changeTypeItems);
				rfcItemGR.initialize();
				rfcItemGR.u_rfc_items_category = category;// RFC Category
				rfcItemGR.u_rfc_items_subcategory = subcategory;// RFC Subcategory
				rfcItemGR.u_rfc_items_item = parsedResponseBody.ChangeTypeItems[count];// RFC item
				rfcItemGR.u_rfc_items_amazon_request_id = parsedResponseBody.requestId["x-amzn-RequestId"];// Ams generated Request Id
				rfcItemGR.insert();
			}
			nextToken = parsedResponseBody.nextToken;
			if (undefined !== nextToken){ // check for nexttoken in respose
				this.getRfcListChangeTypeItemsAndInsert(category,subcategory,nextToken);// call the api with next token
			}
			return true;
		} 
		else return false;
	},
	getListChangeTypeClassificationSummariesAndInsert:function(nextToken)
	{
		body={  "Locale": 'en',"maxResults": maxResults,"nextToken": nextToken};
		var parsedResponseBody = this.amsUtil.getParsedResponseBody(this.changeService,'ListChangeTypeClassificationSummaries',body);// raise a request
		var jsonBody = JSON.stringify(parsedResponseBody);
		if (jsonBody.indexOf('ChangeTypeClassificationSummaries') > -1){ // Check for ChangeTypeOperationSummaries inResponsebody
			for (var count = 0; count < parsedResponseBody.ChangeTypeClassificationSummaries.length; count++){
				// loop throughthe ChangeTypeOperation
				var rfcOperationGR = new GlideRecord(this.changeTypeClassifications);
				rfcOperationGR.initialize();
				rfcOperationGR.u_rfc_classification_subcategory =parsedResponseBody.ChangeTypeClassificationSummaries[count].Subcategory;
				rfcOperationGR.u_rfc_classification_operation = parsedResponseBody.ChangeTypeClassificationSummaries[count].Operation;
				rfcOperationGR.	u_rfc_classification_item = parsedResponseBody.ChangeTypeClassificationSummaries[count].Item;
				rfcOperationGR.u_rfc_classification_change_type_id=parsedResponseBody.ChangeTypeClassificationSummaries[count].ChangeTypeId;
				rfcOperationGR.u_rfc_classsification_category=parsedResponseBody.ChangeTypeClassificationSummaries[count].Category;
				rfcOperationGR.u_rfc_classification_amazon_request_id = parsedResponseBody.requestId["x-amzn-RequestId"];// Ams generated Request Id
				rfcOperationGR.insert();
			}
			nextToken = parsedResponseBody.nextToken;
			if (undefined !== nextToken){ // check for nexttoken in respose
				this.getListChangeTypeClassificationSummariesAndInsert(nextToken);// call the api with next token
			}
			return true;
		} 
		else return false;
	},
	// Function to ListChangeTypeOperations for RFC
	getRfcListChangeTypeOperationsAndInsert : function(category, item, subcategory, nextToken) 
	{
		body = {
			"Category" : category,
			"Item" : item,
			"locale" : "en",
			"maxResults" : maxResults,
			"nextToken" : nextToken,
			"Subcategory" : subcategory
		};
		var parsedResponseBody = this.amsUtil.getParsedResponseBody(this.changeService, 'ListChangeTypeOperations', body);// raise a request
		var jsonBody = JSON.stringify(parsedResponseBody);
		if (jsonBody.indexOf('ChangeTypeOperationSummaries') > -1){ // Check for ChangeTypeOperationSummaries inResponsebody
			for (var count = 0; count < parsedResponseBody.ChangeTypeOperationSummaries.length; count++) {
				var rfcOperationGR = new GlideRecord(this.changeTypeOperations);
				var record=parsedResponseBody.ChangeTypeOperationSummaries[count];
				rfcOperationGR.initialize();
				rfcOperationGR.u_rfc_operations_changetypeid =record.ChangeTypeId;
				rfcOperationGR.u_rfc_operations_operation =record.Operation;// RFC Category
				rfcOperationGR.u_rfc_operations_category = category;
				rfcOperationGR.u_rfc_operations_subcategory = subcategory;
				rfcOperationGR.u_rfc_operations_item = item;
				rfcOperationGR.u_rfc_catsubitemoperation = item+subcategory+category+record.Operation;
				rfcOperationGR.u_rfc_operations_amazon_request_id = parsedResponseBody.requestId["x-amzn-RequestId"];// Ams generated Request Id
				rfcOperationGR.insert();
			}
			nextToken = parsedResponseBody.nextToken;
			if (undefined !== nextToken){ // check for nexttoken in respose
				this.getRfcListChangeTypeOperationsAndInsert(category, item, subcategory, nextToken);// call the api with next token
			}
			return true;
		} 
		else return false;
	},
	//Function to get Change Type Version and Insert	
	getChangeTypeVersionAndInsert:function(changeTypeId,locale,version)
	{
		if (!changeTypeId){
			if (logger)
				gs.error('AMSResourceFetch >>>> getChangeTypeVersionAndInsert. changeTypeId is required');
			return false;
		}
		body={"ChangeTypeId": changeTypeId,"Locale": locale,"Version":version};
		var parsedResponseBody = this.amsUtil.getParsedResponseBody(this.changeService,'GetChangeTypeVersion',body);// raise a request
		var jsonBody = JSON.stringify(parsedResponseBody);
		if (jsonBody.indexOf('ChangeTypeVersion') > -1){ // Check for severityLevels in Response body
			var record =parsedResponseBody.ChangeTypeVersion;
			var changeTypeVersionsGR = new GlideRecord(this.changeTypeVersion);
				changeTypeVersionsGR.initialize();
				changeTypeVersionsGR.u_rfc_change_type_version_changetypeid =record.ChangeTypeId;
				changeTypeVersionsGR.u_rfc_change_type_version_createdtime = record.CreatedTime;
				changeTypeVersionsGR.u_rfc_change_type_version_deprecationmessage=record.DeprecationMessage;
				changeTypeVersionsGR.u_rfc_change_type_version_executioninputschema=record.ExecutionInputSchema;
				changeTypeVersionsGR.u_rfc_change_type_version_expectedexecutiondurationinminutes= record.ExpectedExecutionDurationInMinutes;
				changeTypeVersionsGR.u_rfc_change_type_version_version=record.Version;
				changeTypeVersionsGR.u_rfc_change_type_version_approvalcondition=JSON.stringify(record.ApprovalCondition);
				changeTypeVersionsGR.u_rfc_change_type_version_approvalcondition_aws_approval=record.ApprovalCondition.CustomerApproval.Id;
				changeTypeVersionsGR.u_rfc_change_type_version_approvalcondition_customer_approval=record.ApprovalCondition.AwsApproval.Id;
				changeTypeVersionsGR.u_rfc_change_type_version_automationstatus=record.AutomationStatus.Id;
				changeTypeVersionsGR.insert();
			return true;
		} 
		else return false;
	},
	type: 'RfcPOC '
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>sahitya</sys_created_by>
        <sys_created_on>2017-05-05 07:15:21</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>c9742c65dbe6f200ef73d8c0cf961934</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>RfcPOC </sys_name>
        <sys_package display_value="AMS" source="x_109369_ams">5b693bf9db427200ef73d8c0cf961927</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AMS">5b693bf9db427200ef73d8c0cf961927</sys_scope>
        <sys_update_name>sys_script_include_c9742c65dbe6f200ef73d8c0cf961934</sys_update_name>
        <sys_updated_by>sahitya</sys_updated_by>
        <sys_updated_on>2017-05-05 14:03:24</sys_updated_on>
    </sys_script_include>
</record_update>
